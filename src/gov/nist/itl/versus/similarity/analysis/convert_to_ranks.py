"""
 This software was developed at the National Institute of Standards and
 Technology by employees of the Federal Government in the course of
 their official duties. Pursuant to title 17 Section 105 of the United
 States Code this software is not subject to copyright protection and is
 in the public domain. This software is an experimental system. NIST assumes
 no responsibility whatsoever for its use by other parties, and makes no
 guarantees, expressed or implied, about its quality, reliability, or
 any other characteristic. We would appreciate acknowledgment if the
 software is used.
 
 
    Date: 08-09-2013
"""

"""
Replaces the similarity scores in an csv generated by versus with rankings instead
Creates the converted files in the out_dir_list directories, with a suffix of -rank 

For example:
2.6    ->    3
1.2    ->    2
0.7    ->    1
3.0    ->    5
2.8    ->    4

Warnings: 
-Does not create directories. All out directories must be created, 
though corresponding subfolder structure does not need to be. 
-Also all subfolders in the dirs in in_dir_list must only contain valid 
Versus result csv files

"""

import re
import os

in_dir_list = ["C:\Users\cng1\Documents\TestImages\Simulated_Data_v2\Simulated_Data_ft_Versus",

"C:\Users\cng1\Documents\TestImages\Simulated_Data_v2\Simulated_Data_gabor_Versus",
    "C:\Users\cng1\Documents\TestImages\Simulated_Data_v2\Simulated_Data_glcm_Versus",
    "C:\Users\cng1\Documents\TestImages\Simulated_Data_v2\Simulated_Data_no_Versus",
    "C:\Users\cng1\Documents\TestImages\Simulated_Data_v2\Simulated_Data_sobel_Versus"
    
    ]
    
out_dir_list = ["C:\Users\cng1\Documents\TestImages\Simulated_Data_Rank\Simulated_Data_ft_Versus",
"C:\Users\cng1\Documents\TestImages\Simulated_Data_Rank\Simulated_Data_gabor_Versus"
    "C:\Users\cng1\Documents\TestImages\Simulated_Data_Rank\Simulated_Data_glcm_Versus",
    "C:\Users\cng1\Documents\TestImages\Simulated_Data_Rank\Simulated_Data_no_Versus",
    "C:\Users\cng1\Documents\TestImages\Simulated_Data_Rank\Simulated_Data_sobel_Versus"
    ]
    
    
#Runs the conversion to ranks on all the folders in the in_dir_list
def main():
    for (in_dir, out_dir) in zip(in_dir_list, out_dir_list):
        sub_dirs = os.listdir(in_dir)
        for sub_dir in sub_dirs:
            if os.path.isdir(os.path.join(in_dir, sub_dir)):
                out_path = os.path.join(out_dir, sub_dir)
                in_path = os.path.join(in_dir, sub_dir)
                print "Created: " + out_path
                run_ranks(in_path, out_path)

#find all csv files in directory
def dir_find(root, suffix):
	return [file for file in os.listdir(root) if suffix in file]
                
#Create files with ranks corresponding to ones in the folder given it
#csv_dir contains files to be converted
#outpath will contain the converted files 
def run_ranks(csv_dir, outpath):
    data = dir_find(csv_dir, '.csv')
    if not os.path.exists(outpath): 
        os.makedirs(outpath)
        
    for filename in data:
        in_file = open(csv_dir + os.sep + filename, 'r')
        out_file = open(outpath + os.sep + get_outfile(in_file), 'w')
        
        replace_with_ranks(in_file, out_file)
    out_file.close()
    in_file.close()
                
#Writes converted contents to an open file, 
#given an open input file to be converted 
def replace_with_ranks(in_file, out_file):
    y = get_vals(in_file)
    rank_dict = make_rank_dictionary(y)
    in_file.seek(0)
    for line in in_file:
        n1, n2, num = line.split(',')
        if n1 == n2:
            new_line = line.replace( num, str(get_direc(num)) )+"\n"
        else:
            new_line = line.replace(num, str(rank_dict[num])+"\n")
        out_file.write(new_line)
    

    

#opened file -> list of all similarity values in a csv
def get_vals(file):
    vals = [num for n1, n2, num in [line.split(',') for line in file] if n1 != n2]
    return vals
  
#Ensures that the reference to reference value used to determine
#whether a measure is a similarity measure or a dissimilarity measure
#remains distinctive
def get_direc(num):
    if float(num) == 0:
        return -999 #Dissimilarity
    else:
        return 999  #Similarity

#list of values -> dictionary with {value: rank} for all values
def make_rank_dictionary(vals):
    invalid = [num for num in vals if float(num) > 10E10]
    valid = [num for num in vals if float(num) < 10E10]
    ordered = sorted(valid)
    enum = [(b, a) for a, b in list(enumerate(ordered))]
    rank_dict = dict(enum)
    for num in invalid:
        rank_dict[num] = "nan"
    return rank_dict

#appends -rank to the input file name for the output file name
def get_outfile(file):
    inpath = file.name
    file_ex = re.compile('\\\\([0-9A-Za-z\-_]*).csv')
    file_name = file_ex.search(inpath).groups()[0]
    file_name += "-rank.csv"
    return file_name
 
 
if __name__ == '__main__':
	main()
